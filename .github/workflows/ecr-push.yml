name: Build and Push to ECR

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'apps/hello-world/**'
      - '.github/workflows/ecr-push.yml'
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag'
        required: false
        default: 'latest'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: nova-infra-production

jobs:
  build-and-push:
    name: Build and Push Docker Image to ECR
    runs-on: ubuntu-latest

    outputs:
      image_uri: ${{ steps.build.outputs.image_uri }}
      image_tag: ${{ steps.build.outputs.image_tag }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: image=moby/buildkit:latest

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build and push Docker image
      id: build
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.event.inputs.image_tag || github.sha }}
      run: |
        cd apps/hello-world

        # Full image URI
        IMAGE_URI="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"

        echo "Building image: ${IMAGE_URI}"

        # Build with Docker Buildx for better caching
        docker buildx build \
          --platform linux/amd64 \
          --tag ${IMAGE_URI} \
          --tag ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest \
          --cache-from type=local,src=/tmp/.buildx-cache \
          --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
          --push \
          --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
          --build-arg VCS_REF=${GITHUB_SHA} \
          --build-arg VERSION=${IMAGE_TAG} \
          .

        # Move cache
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

        echo "image_uri=${IMAGE_URI}" >> $GITHUB_OUTPUT
        echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

        echo "âœ… Image successfully pushed to ECR:"
        echo "   Repository: ${ECR_REGISTRY}/${ECR_REPOSITORY}"
        echo "   Tags: ${IMAGE_TAG}, latest"

    - name: Scan image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.build.outputs.image_uri }}
        format: 'table'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Output image details
      run: |
        echo "### ðŸš€ Docker Image Published to ECR" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: ${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository**: ${{ env.ECR_REPOSITORY }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag**: ${{ steps.build.outputs.image_tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URI**: ${{ steps.build.outputs.image_uri }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“‹ Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "Deploy to EKS using:" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "helm upgrade --install tf-visualizer ./helm/tf-visualizer \\" >> $GITHUB_STEP_SUMMARY
        echo "  --set image.repository=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }} \\" >> $GITHUB_STEP_SUMMARY
        echo "  --set image.tag=${{ steps.build.outputs.image_tag }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
