name: Terraform Validation

on:
  pull_request:
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-*.yml'
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-*.yml'

env:
  TERRAFORM_VERSION: 'latest'
  AWS_REGION: us-east-1

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Format Check
      run: |
        terraform fmt -check -recursive
      working-directory: ./terraform
      continue-on-error: true

    - name: Bootstrap Terraform Backend
      run: |
        cd bootstrap
        terraform init
        terraform validate
      working-directory: ./terraform

    - name: Initialize Main Terraform
      run: |
        # Use default bucket name if secret not set
        STATE_BUCKET="${{ secrets.TF_STATE_BUCKET }}"
        if [ -z "$STATE_BUCKET" ]; then
          STATE_BUCKET="nova-infra-803442506948-us-east-1-tfstate"
          echo "Using default state bucket: $STATE_BUCKET"
        fi

        terraform init \
          -backend-config="bucket=${STATE_BUCKET}" \
          -backend-config="key=terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="dynamodb_table=nova-infra-terraform-lock" \
          -backend-config="encrypt=true"
      working-directory: ./terraform

    - name: Validate Terraform
      run: terraform validate
      working-directory: ./terraform

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -out=tfplan -no-color | tee plan_output.txt
      working-directory: ./terraform
      continue-on-error: true

    - name: Comment PR with Validation Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('./terraform/plan_output.txt', 'utf8');

          // Truncate plan if too long
          const maxLength = 60000;
          const truncatedPlan = plan.length > maxLength
            ? plan.substring(0, maxLength) + '\n\n... (truncated)'
            : plan;

          const output = `## Terraform Validation Results üîç

          ### Format Check
          ${{ steps.format.outcome == 'success' && '‚úÖ Passed' || '‚ö†Ô∏è Failed - Run `terraform fmt`' }}

          ### Validation
          ‚úÖ Configuration is valid

          ### Plan Output
          <details><summary>Show Plan</summary>

          \`\`\`terraform
          ${truncatedPlan}
          \`\`\`

          </details>

          *Workflow: ${{ github.workflow }}, Run: ${{ github.run_number }}*`;

          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.find(comment =>
            comment.user.type === 'Bot' &&
            comment.body.includes('Terraform Validation Results')
          );

          // Update or create comment
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: output
            });
          }
