name: Terraform Deploy

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production

env:
  TERRAFORM_VERSION: '1.6.0'

jobs:
  terraform:
    name: Terraform ${{ github.event.inputs.action }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    # Prevent concurrent deployments
    concurrency:
      group: terraform-${{ github.event.inputs.environment }}
      cancel-in-progress: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Get AWS Account Info
      id: aws_info
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "account_id=$ACCOUNT_ID" >> $GITHUB_OUTPUT
        echo "🔐 AWS Account: $ACCOUNT_ID"

    - name: Initialize Terraform
      run: |
        echo "🏗️ Initializing Terraform with backend:"
        echo "   Bucket: ${{ secrets.TF_STATE_BUCKET }}"
        echo "   Region: ${{ secrets.AWS_REGION }}"

        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=terraform.tfstate" \
          -backend-config="region=${{ secrets.AWS_REGION }}" \
          -backend-config="dynamodb_table=nova-infra-terraform-lock" \
          -backend-config="encrypt=true"
      working-directory: ./terraform

    - name: Terraform Workspace
      run: |
        terraform workspace select ${{ github.event.inputs.environment }} || \
        terraform workspace new ${{ github.event.inputs.environment }}
      working-directory: ./terraform

    - name: Terraform Plan
      if: github.event.inputs.action == 'plan'
      run: |
        echo "📋 Running Terraform Plan for ${{ github.event.inputs.environment }}..."
        terraform plan \
          -var="environment=${{ github.event.inputs.environment }}" \
          -out=tfplan
      working-directory: ./terraform

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      run: |
        echo "🚀 Applying Terraform changes to ${{ github.event.inputs.environment }}..."
        terraform apply \
          -var="environment=${{ github.event.inputs.environment }}" \
          -auto-approve
      working-directory: ./terraform

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: |
        echo "🗑️ Destroying infrastructure in ${{ github.event.inputs.environment }}..."
        echo "⚠️ WARNING: This will destroy all resources!"
        terraform destroy \
          -var="environment=${{ github.event.inputs.environment }}" \
          -auto-approve
      working-directory: ./terraform

    - name: Terraform Outputs
      if: github.event.inputs.action == 'apply'
      id: outputs
      run: |
        echo "📊 Terraform Outputs:"
        terraform output -json > outputs.json
        cat outputs.json | jq .

        # Extract key outputs
        VPC_ID=$(terraform output -raw vpc_id 2>/dev/null || echo "N/A")
        EKS_CLUSTER=$(terraform output -raw eks_cluster_name 2>/dev/null || echo "N/A")

        echo "vpc_id=$VPC_ID" >> $GITHUB_OUTPUT
        echo "eks_cluster=$EKS_CLUSTER" >> $GITHUB_OUTPUT
      working-directory: ./terraform
      continue-on-error: true

    - name: Update kubeconfig
      if: github.event.inputs.action == 'apply' && steps.outputs.outputs.eks_cluster != 'N/A'
      run: |
        echo "☸️ Updating kubeconfig for EKS cluster..."
        aws eks update-kubeconfig \
          --region ${{ secrets.AWS_REGION }} \
          --name ${{ steps.outputs.outputs.eks_cluster }}

        echo "Testing connection to cluster..."
        kubectl get nodes
      continue-on-error: true

    - name: Job Summary
      if: always()
      run: |
        echo "## Terraform ${{ github.event.inputs.action }} Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Action:** ${{ github.event.inputs.action }}" >> $GITHUB_STEP_SUMMARY
        echo "**AWS Account:** ${{ steps.aws_info.outputs.account_id }}" >> $GITHUB_STEP_SUMMARY
        echo "**Region:** ${{ secrets.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ github.event.inputs.action }}" == "apply" ] && [ -f ./terraform/outputs.json ]; then
          echo "### Infrastructure Outputs" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          cat ./terraform/outputs.json | jq . >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ github.event.inputs.action }}" == "destroy" ]; then
          echo "⚠️ **Infrastructure has been destroyed**" >> $GITHUB_STEP_SUMMARY
        fi
