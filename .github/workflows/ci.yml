name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  DOCKER_BUILDKIT: 1

jobs:
  build-ci-image:
    name: Build CI Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: nova-infra-ci
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha

    - name: Build CI image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.ci
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/ci-image.tar

    - name: Upload CI image
      uses: actions/upload-artifact@v3
      with:
        name: ci-image
        path: /tmp/ci-image.tar

  terraform-validation:
    name: Terraform Validation
    runs-on: ubuntu-latest
    needs: build-ci-image

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download CI image
      uses: actions/download-artifact@v3
      with:
        name: ci-image
        path: /tmp

    - name: Load CI image
      run: docker load --input /tmp/ci-image.tar

    - name: Run Terraform validation
      run: |
        docker run --rm -v ${{ github.workspace }}:/workspace \
          ${{ needs.build-ci-image.outputs.image-tag }} \
          bash -c "
            cd /workspace/terraform
            terraform init -backend=false
            terraform fmt -check -recursive
            terraform validate
            tflint --init
            tflint --config=/workspace/.tflint.hcl
            trivy config .
          "

  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    needs: build-ci-image

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download CI image
      uses: actions/download-artifact@v3
      with:
        name: ci-image
        path: /tmp

    - name: Load CI image
      run: docker load --input /tmp/ci-image.tar

    - name: Run Python tests
      run: |
        docker run --rm -v ${{ github.workspace }}:/workspace \
          ${{ needs.build-ci-image.outputs.image-tag }} \
          bash -c "
            cd /workspace/apps/hello-world
            python -m venv venv
            source venv/bin/activate
            pip install -r requirements.txt
            pip install ruff mypy pytest pytest-cov
            ruff check backend tests
            mypy backend tests
            pytest tests --cov=backend --cov-report=xml --cov-report=term
          "

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./apps/hello-world/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: build-ci-image

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download CI image
      uses: actions/download-artifact@v3
      with:
        name: ci-image
        path: /tmp

    - name: Load CI image
      run: docker load --input /tmp/ci-image.tar

    - name: Run Frontend tests
      run: |
        docker run --rm -v ${{ github.workspace }}:/workspace \
          ${{ needs.build-ci-image.outputs.image-tag }} \
          bash -c "
            cd /workspace/apps/hello-world/frontend
            npm ci
            npm run lint || true
            npm run build
          "

  pre-commit:
    name: Pre-commit Checks
    runs-on: ubuntu-latest
    needs: build-ci-image

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download CI image
      uses: actions/download-artifact@v3
      with:
        name: ci-image
        path: /tmp

    - name: Load CI image
      run: docker load --input /tmp/ci-image.tar

    - name: Run pre-commit
      run: |
        docker run --rm -v ${{ github.workspace }}:/workspace \
          ${{ needs.build-ci-image.outputs.image-tag }} \
          bash -c "
            cd /workspace
            git config --global --add safe.directory /workspace
            pre-commit install
            pre-commit run --all-files
          "
