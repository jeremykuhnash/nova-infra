name: CI Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - "apps/tf-visualizer/**"
      - "helm/tf-visualizer/**"
      - ".github/workflows/**"
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      deploy_only:
        description: "Skip build and only deploy"
        required: false
        default: "false"
        type: choice
        options:
          - "true"
          - "false"

env:
  DOCKER_BUILDKIT: 1
  AWS_REGION: us-east-1
  ECR_REPOSITORY: nova-infra

jobs:
  # Test backend and frontend
  test:
    name: Test Application
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.deploy_only != 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run Backend Tests
        run: |
          cd apps/tf-visualizer
          docker build --target test -t tf-visualizer-test .
          # Run tests and extract coverage in one step
          docker run --name test-container tf-visualizer-test
          docker cp test-container:/app/work/coverage ./coverage
          docker rm test-container

      - name: Run Frontend Tests
        run: |
          cd apps/tf-visualizer
          docker build --target frontend-test -t tf-visualizer-frontend-test .
          # Frontend test stage runs tests during build

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./apps/tf-visualizer/coverage/coverage.xml
          directory: ./apps/tf-visualizer
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  # Pre-commit checks
  pre-commit:
    name: Pre-commit Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.7"

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Run pre-commit
        run: |
          git config --global --add safe.directory ${{ github.workspace }}
          pre-commit install
          pre-commit run --all-files

  # Build and push to ECR
  build-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: [test, pre-commit]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    outputs:
      image-uri: ${{ steps.build.outputs.image-uri }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image
        id: build
        working-directory: ./apps/tf-visualizer
        run: |
          # Get ECR registry and repository
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY=${{ env.ECR_REPOSITORY }}

          # Set image tag
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            IMAGE_TAG="latest"
          else
            IMAGE_TAG="${{ github.ref_name }}"
          fi

          # Full image URI
          IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

          # Build production image and push
          docker build --target production -t $IMAGE_URI .
          docker push $IMAGE_URI

          echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.build.outputs.image-uri }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

  # Deploy to EKS
  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: [build-push]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name tf-visualizer-cluster

      - name: Deploy with Helm
        run: |
          # Extract image repository and tag from URI
          IMAGE_URI="${{ needs.build-push.outputs.image-uri }}"
          IMAGE_REPO=$(echo $IMAGE_URI | cut -d':' -f1)
          IMAGE_TAG=$(echo $IMAGE_URI | cut -d':' -f2)

          helm upgrade --install tf-visualizer ./helm/tf-visualizer \
            --set image.repository=$IMAGE_REPO \
            --set image.tag=$IMAGE_TAG \
            --wait --timeout=300s

      - name: Check deployment status
        run: |
          kubectl get pods -l app=tf-visualizer
          kubectl get services tf-visualizer

      - name: Run smoke tests
        run: |
          # Wait for service to be ready
          kubectl wait --for=condition=ready pod -l app=tf-visualizer --timeout=300s

          # Get service URL
          LB_URL=$(kubectl get service tf-visualizer -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

          # Basic health check
          timeout 60 bash -c "until curl -f http://$LB_URL/health; do sleep 5; done"

          echo "Deployment successful! Application available at: http://$LB_URL"
