name: Terraform Operations

on:
  push:
    branches: [main]
    paths:
      - "terraform/**"
      - ".github/workflows/terraform-*.yml"
  pull_request:
    branches: [main]
    paths:
      - "terraform/**"
  workflow_dispatch:
    inputs:
      action:
        description: "Terraform action to perform"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply
          - destroy
          - validate
      workspace:
        description: "Terraform workspace"
        required: false
        default: "default"
        type: string

env:
  AWS_REGION: us-east-1
  TF_VERSION: "1.5.0"

jobs:
  # Terraform validation for PRs
  validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'validate')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install validation tools
        run: |
          # Install tflint
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

          # Install tfsec
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash

      - name: Terraform validation
        working-directory: ./terraform
        run: |
          terraform init -backend=false
          terraform fmt -check -recursive
          terraform validate

      - name: TFLint validation
        working-directory: ./terraform
        run: |
          tflint --init
          tflint --config=../.tflint.hcl

      - name: TFSec security scan
        working-directory: ./terraform
        run: |
          tfsec . --format sarif --out tfsec-results.sarif || true

      - name: Upload TFSec results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: terraform/tfsec-results.sarif

  # Terraform plan
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    outputs:
      plan-file: ${{ steps.plan.outputs.plan-file }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Select workspace
        working-directory: ./terraform
        run: |
          WORKSPACE="${{ github.event.inputs.workspace || 'default' }}"
          terraform workspace select $WORKSPACE || terraform workspace new $WORKSPACE

      - name: Terraform Plan
        id: plan
        working-directory: ./terraform
        run: |
          PLAN_FILE="tfplan-$(date +%Y%m%d-%H%M%S)"
          terraform plan -out=$PLAN_FILE
          echo "plan-file=$PLAN_FILE" >> $GITHUB_OUTPUT

      - name: Upload plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/${{ steps.plan.outputs.plan-file }}
          retention-days: 7

  # Terraform apply
  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [plan]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: terraform/

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Select workspace
        working-directory: ./terraform
        run: |
          WORKSPACE="${{ github.event.inputs.workspace || 'default' }}"
          terraform workspace select $WORKSPACE

      - name: Terraform Apply
        working-directory: ./terraform
        run: |
          terraform apply ${{ needs.plan.outputs.plan-file }}

      - name: Output infrastructure info
        working-directory: ./terraform
        run: |
          echo "## Infrastructure Deployed" >> $GITHUB_STEP_SUMMARY
          echo "- EKS Cluster: $(terraform output -raw eks_cluster_name)" >> $GITHUB_STEP_SUMMARY
          echo "- ECR Repository: $(terraform output -raw ecr_repository_url)" >> $GITHUB_STEP_SUMMARY
          echo "- VPC ID: $(terraform output -raw vpc_id)" >> $GITHUB_STEP_SUMMARY

  # Terraform destroy
  destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: destruction

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Select workspace
        working-directory: ./terraform
        run: |
          WORKSPACE="${{ github.event.inputs.workspace || 'default' }}"
          terraform workspace select $WORKSPACE

      - name: Terraform Destroy
        working-directory: ./terraform
        run: terraform destroy -auto-approve

      - name: Cleanup confirmation
        run: |
          echo "## Infrastructure Destroyed" >> $GITHUB_STEP_SUMMARY
          echo "All AWS resources have been removed." >> $GITHUB_STEP_SUMMARY
