version: "3.8"

# Consolidated Docker Compose with profiles for different environments
# Usage:
#   docker-compose up                           # Default: Production-like build
#   docker-compose --profile dev up             # Development with hot reload
#   docker-compose --profile local up           # Local filesystem access
#   docker-compose --profile ci up              # CI environment
#   docker-compose --profile with-nginx up      # Include nginx reverse proxy

services:
  # Main application service (default profile)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tf-visualizer
    ports:
      - "5000:5000"
    environment:
      - PORT=5000
      - FLASK_ENV=${FLASK_ENV:-production}
      - PYTHONUNBUFFERED=1
    volumes:
      # Mount actual project directories for visualization
      - ../../terraform:/app/project/terraform:ro
      - ../../helm:/app/project/helm:ro
      # Optional: mount test files for demo
      - ./test-terraform:/app/test-terraform:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - tf-network

  # Development backend with hot reload
  backend-dev:
    image: python:3.12-slim
    container_name: tf-visualizer-backend-dev
    working_dir: /app
    command: >
      sh -c "pip install poetry &&
             poetry install &&
             poetry run python -m flask run --host=0.0.0.0 --port=5000 --reload"
    ports:
      - "5000:5000"
    environment:
      - FLASK_APP=backend.api:app
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend:/app/backend
      - ./pyproject.toml:/app/pyproject.toml
      - ./poetry.lock:/app/poetry.lock
      # Mount actual project directories for visualization
      - ../../terraform:/app/project/terraform:ro
      - ../../helm:/app/project/helm:ro
      # Optional: mount test files for demo
      - ./test-terraform:/app/test-terraform
      # Mount work directory for build artifacts
      - ./work:/app/work
    networks:
      - tf-network
    profiles:
      - dev

  # Development frontend with webpack dev server
  frontend-dev:
    image: node:18-alpine
    container_name: tf-visualizer-frontend-dev
    working_dir: /app
    command: >
      sh -c "npm install &&
             npm start"
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:5000
    volumes:
      - ./frontend:/app
      - ./work/frontend:/app/work/frontend
      - /app/node_modules
    networks:
      - tf-network
    profiles:
      - dev

  # Local development with filesystem access
  app-local:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tf-visualizer-local
    ports:
      - "5000:5000"
    environment:
      - PORT=5000
      - FLASK_ENV=development
      - PYTHONUNBUFFERED=1
      # Configure paths that the API should scan
      - TF_SCAN_PATHS=/app/project/terraform,/app/project/helm
      - DEFAULT_SCAN_PATH=/app/project/terraform
    volumes:
      # Mount the entire parent directory to access all project files
      # Adjust these paths based on where you run docker-compose from
      - ${PROJECT_ROOT:-../..}:/app/project:ro
      # Alternative: mount specific directories
      # - ${TF_DIR:-../../terraform}:/app/project/terraform:ro
      # - ${HELM_DIR:-../../helm}:/app/project/helm:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - tf-network
    profiles:
      - local

  # CI environment
  app-ci:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tf-visualizer-ci
    ports:
      - "5000:5000"
    environment:
      - PORT=5000
      - FLASK_ENV=testing
      - PYTHONUNBUFFERED=1
    volumes:
      - ./test-terraform:/app/test-terraform:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 2
      start_period: 10s
    networks:
      - tf-network
    profiles:
      - ci

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: tf-visualizer-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
    networks:
      - tf-network
    profiles:
      - with-nginx

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: tf-visualizer-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - tf-network
    profiles:
      - with-redis

  # PostgreSQL for persistent storage (optional)
  postgres:
    image: postgres:15-alpine
    container_name: tf-visualizer-postgres
    environment:
      - POSTGRES_DB=tfviz
      - POSTGRES_USER=tfuser
      - POSTGRES_PASSWORD=tfpass
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - tf-network
    profiles:
      - with-postgres

volumes:
  redis-data:
  postgres-data:

networks:
  tf-network:
    driver: bridge
