[tool.ruff]
# Target Python 3.12
target-version = "py312"

# Set line length
line-length = 100

# Cache directory
cache-dir = "work/ruff"

# Include/exclude patterns
include = ["*.py"]
exclude = [
    ".venv",
    "venv",
    "__pycache__",
    "*.egg-info",
    "build",
    "dist",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "work",
]

[tool.ruff.lint]
# Enable specific rule sets
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
]

# Ignore specific rules
ignore = [
    "E501",  # Line too long (handled by formatter)
    "B008",  # Do not perform function calls in argument defaults
]

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"

# Indent with spaces
indent-style = "space"

# Use Unix line endings
line-ending = "lf"

[tool.mypy]
python_version = "3.12"
cache_dir = "work/mypy"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_generics = false
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true

# Exclude patterns
exclude = [
    "venv/",
    ".venv/",
    "build/",
    "dist/",
    "work/",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
cache_dir = "work/pytest"
addopts = """
    -v
    --tb=short
    --strict-markers
    --cov=backend
    --cov-report=term-missing
    --cov-report=html:work/coverage/htmlcov
    --cov-report=xml:work/coverage/coverage.xml
    --cov-report=json:work/coverage/coverage.json
    --junit-xml=work/coverage/junit.xml
"""

[tool.coverage.run]
source = ["backend"]
data_file = "work/coverage/.coverage"
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/work/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.coverage.html]
directory = "work/coverage/htmlcov"

[tool.coverage.xml]
output = "work/coverage/coverage.xml"

[tool.coverage.json]
output = "work/coverage/coverage.json"
